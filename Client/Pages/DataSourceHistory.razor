@page "/fetchdata/{device}"
@inject HttpClient Http

@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib
@using TheSwamp.Shared

@if (_data == null)
{
    <div class="busy" />
}
else
{
    <h1>@_dataSource.Name</h1>

    @if (_dataSource.Values.Any())
    {
        var latest = _dataSource.Values.OrderByDescending(v => v.TimestampUtc).First();
        <span><strong>@latest.Value</strong> (@latest.TimestampUtc.ToLocalTime().ToString("dd MMM HH:mm"))</span>
    }

    <PlotlyChart @bind-Config="_config" @bind-Layout="_layout" @bind-Data="_data" @ref="_chart" />
    
    <div class="events">
        @foreach(var e in _dataSource.Events)
        {
            <div>@e.TimestampUtc @e.Description</div>
        }
    </div>
}

@code {
    [Parameter]
    public string Device { get; set; }

    private DataSourceSummary _dataSource;
    private IList<ITrace> _data;
    private Layout _layout;
    private PlotlyChart _chart;
    private Config _config = new Config();

    protected override async Task OnInitializedAsync()
    {
        _dataSource = await Http.GetFromJsonAsync<DataSourceSummary>($"/api/log/data/" + Device);

        _layout = new Layout()
        {
            Calendar = Plotly.Blazor.LayoutLib.CalendarEnum.Gregorian,
            Title = string.IsNullOrEmpty(_dataSource.Description)
                ? null
                : new Plotly.Blazor.LayoutLib.Title()
                {
                    Text = _dataSource.Description
                },
            YAxis = new List<YAxis>
            {
                new YAxis()
                {
                    Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title()
                    {
                        Text = _dataSource.Units
                    }
                }
            }
        };

        _data = new List<ITrace>
        {
            new Scatter
            {
                Name = "Values",
                Mode = ModeFlag.Lines | ModeFlag.Markers,
                X = _dataSource.Values.OrderBy(x => x.TimestampUtc).Select(x => (object)x.TimestampUtc.ToLocalTime()).ToList(),
                Y = _dataSource.Values.OrderBy(x => x.TimestampUtc).Select(x => (object)Convert.ToDouble(x.Value)).ToList()
            }
        };

        // Add in event data if we have any
        // Probably a better way to do this, just adding as a noddy bar chart for now...
        // ^ Probably shapes? (https://plotly-blazor.azurewebsites.net/shapes)
        if (_dataSource.Events.Any())
        {
            _data.Add(
                new Bar
                {
                    Name = "Events",
                    X = _dataSource.Events.OrderBy(x => x.TimestampUtc).Select(x => (object)x.TimestampUtc.ToLocalTime()).ToList(),
                    Y = _dataSource.Events.OrderBy(x => x.TimestampUtc).Select(x => (object)1).ToList()
                });
        }
    }
}
