@page "/wine"

@using TheSwamp.Shared

@inject HttpClient _http
@inject NavigationManager _navigationManager

<div class="wine-review">
    @if (_review == null)
    {
        <h3>Loading Review...</h3>
        <div class="busy" />
    }
    else
    {
        if (string.IsNullOrEmpty(_review.Error))
        {
            var title = $"LWIN: {_review.Id}\nCountry:{_review.Country}\nRegion:{_review.Region}\nProducerName: {_review.ProducerName}\nColour: {_review.Colour}\nSubType: {_review.SubType}\nVintage: {_review.Vintage}";

            <div class="test">
                <h3 title="@title">@_review.Name</h3>
                <h4>@_review.ProducerName, @_review.Region, @_review.Country</h4>
                <p class="review">
                    <span class="oi oi-double-quote-serif-left" aria-hidden="true"></span>
                    @_review.Blurb
                    <span class="oi oi-double-quote-serif-right" aria-hidden="true"></span>
                </p>
                <button @onclick="Refresh"><span class="oi oi-reload"> Another...</span></button>
            </div>

            var vowels = new[] { "a", "e", "i", "o", "u" };
            var startsWithVowel = vowels.Any(v => _review.Tone.StartsWith(v, StringComparison.OrdinalIgnoreCase));

            <div class="disclaimer">
                Generated by a@(startsWithVowel ? "n" : "") <strong>@_review.Tone</strong> <a href="https://beta.openai.com/" title="GPT-3">AI</a>. Opinions are its own and generally pretty random. Please don't sue me.
            </div>
        }
        else
        {
            <div class="error">@_review.Error</div>
        }

        <div class="dev">
            @foreach (var x in _review.Benchmarks)
            {
                <div>@x.Name @x.Elapsed.TotalSeconds.ToString("0.0")s</div>
            }
        </div>
    }

    @code {
        private Review _review;

        protected override async Task OnInitializedAsync()
        {
            await LoadRandomReviewAsync();
        }

        private async Task Refresh()
        {
            await LoadRandomReviewAsync();
        }

        private async Task LoadRandomReviewAsync()
        {
            try
            {
                _review = null;
                _review = await _http.GetFromJsonAsync<Review>($"/api/wine/random-review");

                this.StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }
    }
</div>
