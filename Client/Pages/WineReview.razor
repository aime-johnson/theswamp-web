@page "/wine"

@using TheSwamp.Shared

@inject HttpClient _http
@inject NavigationManager _navigationManager

<style>
    h3{
        text-align:center;
        font-family: 'Tangerine', serif;
        font-size: 48px;
        text-shadow: 4px 4px 4px #aaa;
    }

    h4{
        text-align:center;
        font-size:small;
    }

    .review{
        margin-top:2em;
        font-style: italic;
    }

    .disclaimer{
        margin-top:1em;
        font-size:x-small;
        font-style:italic;
    }
</style>

@if (_review == null)
{
    <div class="busy" />
}
else
{
    if (string.IsNullOrEmpty(_review.Error))
    {
        var title = $"Id: {_review.Id}\nCountry:{_review.Country}\nRegion:{_review.Region}\nProducerName: {_review.ProducerName}\nColour: {_review.Colour}\nSubType: {_review.SubType}\nVintage: {_review.Vintage}";

        <div class="test">
            <h3 title="@title">@_review.Name</h3>
            <h4>@_review.ProducerName, @_review.Region, @_review.Country</h4>
            <p class="review">
                <span class="oi oi-double-quote-serif-left" aria-hidden="true"></span>
                @_review.Blurb
                <span class="oi oi-double-quote-serif-right" aria-hidden="true"></span>
            </p>
            <button @onclick="Refresh"><span class="oi oi-reload"> Another...</span></button>
        </div>

        var vowels = new[] { "a", "e", "i", "o", "u" };
        var startsWithVowel = vowels.Any(v => _review.Tone.StartsWith(v, StringComparison.OrdinalIgnoreCase));

        <div class="disclaimer">
            Generated by a@(startsWithVowel ? "n" : "") @_review.Tone <a href="https://beta.openai.com/" title="GPT-3">AI</a>. Opinions are its own and generally pretty random. Please don't sue me.
        </div>
    }
    else
    {
        <div class="error">@_review.Error</div>
    }

    <div class="dev">
        @foreach (var x in _review.Benchmarks)
        {
            <div>@x.Name @x.Elapsed.TotalSeconds.ToString("0.0")s</div>
        }
    </div>
}

@code {
    private Review _review;

    protected override async Task OnInitializedAsync()
    {
        await LoadRandomReviewAsync();
    }

    private async Task Refresh()
    {
        await LoadRandomReviewAsync();
    }

    private async Task LoadRandomReviewAsync()
    {
        try
        {
            _review = null;
            _review = await _http.GetFromJsonAsync<Review>($"/api/wine/random-review");

            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }
}
